---
title: "Reproducible Research Environments"
subtitle: "cross language & cross platform"
author:
  - name: Eli Knaap
    orcid: 0000-0001-7520-2238
    email: eknaap@sdsu.edu
    affiliations: San Diego State University
# title-slide-attributes:
#     data-background-image: ../paper/figures/cogs_logo.png
#     data-background-size: 400px 
format:
  revealjs:
    footer: "Elijah Knaap, Center for Open Geographical Science @ SDSU"
    self-contained: true  # i usually self-contain everything in case conference wifi sucks
    embed-resources: true
    self-contained-math: true
date: today  # fix to a real date when final
---

# why {.smaller}

- use [`pixi`](https://pixi.sh/latest/) to recreate the *exact* same environment anywhere (quickly)
- use [`quarto`](https://quarto.org/) to execute and build
- use docker and devcontainers to work anywhere
  - locally
  - in a virtual machine
  - in a cloud-based container
- include all necessary tooling for spatial analysis & academic writing (or teaching!)

## what (tl;dr) {.smaller}

<https://github.com/knaaptime/rypyrx>

- this repo demonstrates a reproducible research project that can (should!) run anywhere, including just in a github codespaces instance (coding on your ipad!)
- this also works nicely for teaching workshops
- the bones are just `pixi` and `quarto`
- the magic is the `.devcontainer` and `.github` configuration files
 
![](_fig_yamls.png)

## end result

- mix and match languages
- install binary deps (gdal and friends) in one go
- [pdf like this](rypyrx.pdf)
- [html like this](rypyrx.html)
 

# setup {.smaller}

this is a template repository; you can run it as-is to get a feel for the workflow, or clone and edit for your needs

## working locally {.smaller}

![](_fig_clone_http.png)

go somewhere on your computer you keep your projects, then clone (or fork *then* clone to run from your own copy)

- `cd projects`
- `git clone https://github.com/knaaptime/rypyrx.git`

## working in a cloud-based container

To open this repository exactly as it appears, just click the button

[![](https://github.com/codespaces/badge.svg)](https://codespaces.new/knaaptime/rypyrx)

## from your own repository (1) {.smaller}

if you want to start a github codespace from another project (like if you forked your own version of this repo)

![](_fig_clone.png)

## from your own repository (2) {.smaller}

![](_fig_create_codespace.png)


## working in a local devcontainer (1)

- install vscode
- install docker

## working in a local devcontainer (2)

- open vscode
- click the little blue icon in the bottom left

![](_fig_remoteicon.png)

## working in a local devcontainer (3)

click 'reopen in container'

![](_fig_reopen.png)

# run {.smaller}

if you need to add/change dependencies, edit the `pixi.toml` file

## the `notebooks` directory {.smaller}

I like jupyter notebooks for doing my main analysis

- the existing `pixi.toml` file includes both Python and R kernels
  - you can install R stuff outside conda-forge using the usual `install.packages`, but you won't have the lockfile for those packages...
- the notebooks show how to use both languages and generate output for the same paper

## run jupyter

`pixi run jupyter lab`


## edit notebooks

![](_fig_notebooks.png)


# write {.smaller}

use `quarto` to manage file execution order and generate outputs

## the `paper` directory  {.smaller}

this directory stores a standalone quarto project

- use the `_quarto.yml` file to include any pieces you need executed
- i like to split academic drafts into files by section, the use `include`s to wrap them together
- when submitting latex to journals, they often require all additional files (figures, bibs) be in the *same directory* as the main file. That usually creates a ton of files in one directory which i hate, so i use prefixes to differentiate file types

## the index.qmd file {.smaller}

I use a single index.qmd file as the main source document, then include each section as a different file

![](_fig_paperdir.png)

## generate the paper

- edit stuff in the `paper` directory
- `pixi run quarto render paper`

## output {.smaller}

the output will be rendered to the default location at `paper/_manuscript/`

configure any preferences in the _quarto.yml file. Mine are

- the default pdf file has the same name as the project (rypryx.pdf in this case)
- the default html file is called `index.html` to make it easier to serve

# publish {.smaller}

There is a preconfigured github-action recipe in the `.github` directory that will serve a static website from the `slides` directory

(edit the names if you like, but i usually have slides to publish). Anything in this directory will be served, so you can also toss your paper in pdf/html in here when it's ready for the public

## configure the repository

one small config:

## go to the repository settings

![](_fig_settings.png)

## go to `pages` settings  {.smaller}

use github actions

![](_fig_gha.png)

the config file is already setup. You're done.

## edit the slides

the `slides` directory is another standalone `quarto` project

- edit the `index.qmd` file in `slides`
- `pixi run quarto render slides`

## commit the directory {.smaller}

commit everything you want public in `slides`, then push it up.

- `cd slides`
- `git add .`
- `git commit -m 'add slides'`
- `git push`

everything will be available at https://{{yourgithubname}}.github.io/{{yourprojectname}}

# more

use quarto extensions to make this look nice.